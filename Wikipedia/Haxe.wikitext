{{Short description|Cross-platform programming language}}
{{Distinguish|Hack (programming language)}}
{{Infobox programming language
| name = Haxe
| logo = Haxe logo.svg
| paradigm = [[Programming paradigm#Multi-paradigm|Multi-paradigm]]: [[Object-oriented programming|object-oriented]], [[Functional programming|functional]], [[Generic programming|generic]]
| family = [[ECMAScript]]
| developer = Haxe Foundation
| released = {{Start date and age|2005|11|14}}
| latest release version = {{wikidata|property|edit|reference|P348}}
| latest release date = {{start date and age|{{wikidata|qualifier|P348|P577}}}}
| typing = [[Type system|static]], [[Dynamic typing|dynamic]] via annotations, [[Nominal type system|nominal]]
| scope = [[Scope (computer science)|lexical]]
| programming language = [[OCaml]]
| platform = [[IA-32]], [[x86-64]], [[AArch64]], [[ARM architecture|armel, armhf]], [[MIPS architecture|MIPS, MIPS64el, MIPSel]], [[ppc64]]el, [[RISC-V]], [[Linux on IBM Z|s390x]]
| operating system = [[Android (operating system)|Android]], [[iOS]]; [[Linux]], [[macOS]], [[Microsoft Windows|Windows]]
| license = [[GNU General Public License|GPL]] 2.0, library: [[MIT License|MIT]]
| file ext = .hx, .hxml
| website = {{Official URL}}
| influenced by = [[ECMAScript]], [[JavaScript]], [[ActionScript]], [[OCaml]], [[Java (programming language)|Java]], [[C++]], [[PHP]], [[C Sharp (programming language)|C#]], [[Python (programming language)|Python]], [[Lua (programming language)|Lua]], [[NekoVM]]
}}
'''Haxe''' is a [[High-level programming language|high-level]] [[cross-platform]] [[programming language]] and [[compiler]] that can produce applications and [[source code]] for many different [[computing platform]]s from one code-base. It is [[free and open-source software]], released under an [[MIT License]].<ref>{{Cite web |title=Open Source licence Haxe |url=https://haxe.org/foundation/open-source.html}}</ref> The compiler is written in [[OCaml]]. It can be run in server-mode to provide code completion for [[integrated development environment]]s (IDEs).<ref>Server mode command-line: <code>haxe --wait [host:]port</code></ref>

Haxe includes a set of features and a [[standard library]]<ref name="hfeatures">[https://haxe.org/documentation/introduction/stdlib-introduction.html Introduction to the Haxe Standard Library], Haxe Docs</ref> supported [[Cross-platform software|across all platforms]], including [[Integer (computer science)|numeric data types]], [[String (computer science)|strings]], [[Array data type|arrays]], [[Associative array|maps]], [[Binary file|binary]], [[reflective programming]], maths, Hypertext Transfer Protocol ([[HTTP]]), file system and common [[file format]]s. Haxe also includes platform-specific application programming interfaces ([[API]]s) for each compiler target.<ref>[https://haxe.org/documentation/introduction/stdlib-introduction.html#target-apis Target Specific APIs, Introduction to the Haxe Standard Library], Haxe Docs</ref> ''Kha'', ''[[OpenFL]]'', and ''Heaps.io'' are popular Haxe frameworks that enable creating multi-platform content from one codebase.<ref name="gs_adobe">{{cite web |last1=Doucet |first1=Lars |date=2014-06-24 |url=http://www.gamasutra.com/blogs/LarsDoucet/20140624/219674/Dear_Adobe_Support_Haxe_save_your_Tools.php |title=Dear Adobe: Support Haxe, save your Tools |website=Gamasutra}}</ref>

Haxe originated with the idea of supporting [[client-side]] and [[server-side]] programming in one language, and simplifying the communication logic between them.<ref name="haxe-interview">{{cite news |url=http://ncannasse.fr/blog/haxe_interview |title=Haxe Interview |publisher=Io Programmo |date=2009-04-01 |pages=1â€“6 |access-date=2015-08-06 |archive-date=2015-12-08 |archive-url=https://web.archive.org/web/20151208134720/http://ncannasse.fr/blog/haxe_interview |url-status=dead }}</ref> Code written in Haxe can be [[source-to-source compiler|compiled]] into [[JavaScript]], [[C++]], [[Java (programming language)|Java]], [[Java (programming language)|JVM]], [[PHP]], [[C Sharp (programming language)|C#]], [[Python (programming language)|Python]], [[Lua (programming language)|Lua]]<ref>{{Cite web |url=https://haxe.org/blog/hello-lua |title=Hello Lua! |website=Haxe.org}}</ref> and [[Node.js]].<ref>{{Cite web|url=https://lib.haxe.org/p/hxnodejs |title=hxnodejs}}</ref> Haxe can also directly compile [[SWF]], HashLink,<!-- Linking this term makes a WP:SELFLINK. Do not link until dedicated section or article exists. --> and [[NekoVM]] [[bytecode]] and also runs in interpreted mode.<ref name="compiler-targets">{{Cite web |title=Compiler Targets |url=https://haxe.org/documentation/introduction/compiler-targets.html |website=Haxe |access-date=2021-11-05}}</ref>

Haxe supports externs (definition files) that can contain [[data type]] information of extant [[Library (computing)|libraries]] to describe target-specific interaction in a type-safe manner, like [[C++]] [[header files]] can describe the structure of existing [[object file]]s. This enables to use the values defined in the files as if they were statically typed Haxe entities. Beside externs, other solutions exist to access each platform's native capabilities.

Many popular [[Integrated development environment|IDE]]s and [[source code editor]]s have support available for Haxe development.<ref>[https://haxe.org/documentation/introduction/editors-and-ides.html List of IDEs supporting Haxe], Haxe Foundation</ref> No particular development environment or tool set is officially recommended by the Haxe Foundation, although [[VS Code]], [[IntelliJ IDEA]] and HaxeDevelop have the most support for Haxe development. The core functionalities of [[syntax highlighting]], [[code completion]], [[refactoring]], [[debugging]], etc. are available to various degrees.

==History==
Development of Haxe began in October 2005. The first [[Software release life cycle#Alpha|alpha version]] was released on November 14, 2005.<ref name="alpha1-tag">{{cite web |date=2005-11-14 |title=Release alpha-1 |website=haxe |publisher=HaxeFoundation |via=[[GitHub]] |url=https://github.com/HaxeFoundation/haxe/releases/tag/alpha-1 |access-date=2022-04-02}}</ref><ref name="alpha1b-ml">{{cite mailing list |last=Cannasse |first=Nicolas |date=2005-11-17 |title=Haxe Alpha 1b |mailing-list=haXe |url=http://lists.motion-twin.com/pipermail/haxe/2005-November/000921.html |archive-url=https://web.archive.org/web/20071026065835/http://lists.motion-twin.com/pipermail/haxe/2005-November/000921.html |archive-date=2007-10-26}}</ref> Haxe 1.0 was released in April 2006, with support for [[Adobe Flash]], [[JavaScript]], and [[NekoVM]] programs. Support for [[PHP]] was added in 2008, and C++ was added in 2009. More platforms such as C# and Java were added with a compiler overhaul in 2012.

Haxe was developed by Nicolas Cannasse and other contributors, and was originally named ''haXe''<ref name="Haxe-capitalisation">{{cite web |url=https://groups.google.com/d/topic/haxelang/O7PB-ZrX4i4/discussion |title=Nicolas' announcement of spelling change on Haxe official mail list}}</ref> because it was short, simple, and "has an X inside", which the author asserts humorously is needed to make any new technology a success.<ref name="naming-post">{{cite web |url=http://lists.motion-twin.com/pipermail/haxe/2007-March/007897.html |title=Haxe mailing list post on naming |url-status=dead |archive-url=https://web.archive.org/web/20070328232003/http://lists.motion-twin.com/pipermail/haxe/2007-March/007897.html |archive-date=2007-03-28}}</ref>

Haxe is the successor to the open-source [[ActionScript]] 2 compiler [[MTASC]],<ref name="mtasc">[http://www.mtasc.org MTASC Compiler], MTASC website</ref> also built by Nicolas Cannasse and is released under the [[GNU General Public License]] version 2 or later.

==Compiler==
The Haxe language can compile into [[bytecode]] that can be executed directly by the [[virtual machine]]s it targets. It can compile to [[source code]] in [[C++]], [[JavaScript]], [[PHP]], [[C Sharp (programming language)|C#]], [[Java (programming language)|Java]], [[Python (programming language)|Python]], and [[Lua (programming language)|Lua]]. Haxe also has an interpreter called ''eval''.<ref>{{Cite web |title=Eval - The new Haxe macro interpreter |url=https://haxe.org/blog/eval/}}</ref> This same interpreter is also used compile-time to run macros, which allow modification of the [[abstract syntax tree]] (AST).

This strategy of compiling to multiple source code languages is inspired by the [[write once, run anywhere]] paradigm. It also allows the programmer to choose the best platform for the job. Typical Haxe programs run identically on all platforms, but developers can specify platform-specific code and use [[conditional compilation]] to prevent it from compiling on other platforms.

The Haxe compiler is an [[optimizing compiler]], and uses [[Inline expansion|field and function inlining]], [[Tail call|tail recursion elimination]], [[constant folding]], [[loop unrolling]] and [[dead code elimination]] (DCE) to optimize the run-time performance of compiled programs.<ref>{{Cite web|title=Compiler Features|url=https://haxe.org/manual/cr-features.html}}</ref> The Haxe compiler offers opt-in [[Void safety|null-safety]], it checks compile-time for nullable values. The run-time performance of Haxe programs is at comparable speed to handwritten sources.<ref name="yal1">{{cite web|last=Dyachenko|first=Vadim|date=2013-12-05|title=On "You can't make good HTML5 games in Haxe"|url=http://yal.cc/answering-you-cant-make-good-html5-games-in-haxe/|publisher=Yellow After Life}}</ref>

==See also==
{{Portal|Free and open-source software}}
* [[Dart (programming language)]]
* [[Nim (programming language)]]
* [[Opa (programming language)]]
* [[Clojure]]
* [[CoffeeScript]]
* [[TypeScript]]
* [[Scala (programming language)]]
* [[Vala (programming language)]]
* [[Emscripten]]
* [[OpenFL]]

==References==
{{Reflist|33em}}

==External links==
* {{Official website}}

{{Adobe Flash}}
{{JavaScript}}
{{ML programming}}

[[Category:High-level programming languages]]
[[Category:Functional languages]]
[[Category:Multi-paradigm programming languages]]
[[Category:Object-based programming languages]]
[[Category:OCaml software]]
[[Category:Pattern matching programming languages]]
[[Category:Programming languages]]
[[Category:Programming languages created in 2005]]
[[Category:Software using the GNU General Public License]]
[[Category:Source-to-source compilers]]
[[Category:Statically typed programming languages]]
<!-- Hidden categories below -->
[[Category:Articles with example JavaScript code]]
